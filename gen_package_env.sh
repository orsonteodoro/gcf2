#!/bin/bash

SCRIPT_NAME=$(basename "$0")

ASM_OPT="O3.conf"
AUTOFETCH_TARBALLS=0
AUTOSANITIZE_SEARCH_MODE="v2"
CRYPTO_ASYM_OPT_CFG=${CRYPTO_ASYM_OPT_CFG:-"Ofast-ts.conf"} # Based on benchmarks, expensive
CRYPTO_CHEAP_OPT_CFG=${CRYPTO_CHEAP_OPT_CFG:-"O1.conf"}
CRYPTO_EXPENSIVE_OPT_CFG=${CRYPTO_EXPENSIVE_OPT_CFG:-"O3.conf"}
DEVELOPER_MODE="0"
DISTDIR=${DISTDIR:-"/var/cache/distfiles"}
MATH_OPT="O3.conf"
OPENGL_OPT="O3.conf"
LINEAR_MATH_OPT="O3.conf"
PORTAGE_DIR=${PORTAGE_DIR:-"/usr/portage"} # If you edit this, all cut -f 4-5 -d "/" need to be adjusted
SIMD_OPT="O3.conf"
SKIP_INTRO_PAUSE=1
SSA_SANITIZE_SIZE=${SSA_SANITIZE_SIZE:-19000000} # bytes
SSA_SANITIZE_OPT="O1.conf"

gen_pn() {
	local path="${1}"
	local pn
	pn=$(basename "${path}")
	pn="${pn,,}"
	pn=$(echo "${pn}" | sed -r -e "s/tzdata/timezone-data-/g")
	pn=$(echo "${pn}" | sed -r -e "s/tzcode/timezone-data-/g")
	pn=$(echo "${pn}" | sed -r -e "s/(\.|_|-)v?[0-9].*//g")
	pn=$(echo "${pn}" | sed -r -e "s/[0-9]+\.(tar.*|zip)//g")
	pn=$(echo "${pn}" | sed -r -e "s/-everywhere-opensource-src(-|)//g")
	pn=$(echo "${pn}" | sed -r -e "s/\./-/g")
	pn=$(echo "${pn}" | sed -r -e "s/bin_x86/bin/g")
	echo "${pn}"
}

# Large codebases tend to have higher chance of messy or inefficient code.
gen_ssa_autosanitize_list_v1() {
	echo "" >> package.env
	echo "# Large projects found marked for SSA optimizations" >> package.env
	echo "" >> package.env
	echo -e "${pkgs}" | sort | uniq >> package.env

	local path
	for path in $(find "${DISTDIR}" -maxdepth 1 -name "*.tar*" -o -name "*.zip") ; do
		[[ "${path}" =~ "__download__" ]] && continue
		[[ "${path}" =~ ".portage_lockfile" ]] && continue
		local pn=$(gen_pn "${path}")
		[[ "${pn}" =~ "-bin"$ ]] && continue
		local filesize=$(stat -c "%s" "${path}")
		if (( ${filesize} > ${SSA_SANITIZE_SIZE} )) ; then
			printf "%-30s%-10s %s\n" "*/${pn}" "${SSA_SANITIZE_OPT}" "# Filesize: ${filesize}" >> package.env
		fi
	done

	echo "" >> package.env
}

gen_ssa_autosanitize_list_v2() {
	echo "" >> package.env
	echo "# 3D {games, apps, ...}" >> package.env
	echo "# Autogenerated list" >> package.env
	for path in $(find "${PORTAGE_DIR}/" --exclude-dir=.git --exclude-dir=distfiles -name "Manifest") ; do
		local p=$(echo "${path}" | cut -f 4-5 -d "/")
		local filesize=$(grep -r -e "DIST" "${path}" | cut -f 3 -d " " | sort -n | tail -n 1)
		if (( ${filesize} > ${SSA_SANITIZE_SIZE} )) ; then
			printf "%-30s%-10s %s\n" "${p}" "${SSA_SANITIZE_OPT}" "# Filesize: ${filesize}" >> package.env
		fi
	done
	echo "" >> package.env

}

gen_crypto_list() {
	echo
	echo "Generating crypto list.  This may take several minutes.  Please wait..."
	echo

	echo "" >> package.env
	echo "# Crypto packages found" >> package.env
	echo "" >> package.env
	echo -e $(bash gen_crypto_package_lst.sh | tr "\n" ";" | tr "\t" "^") | tr "^" "\t" | tr ";" "\n" >> package.env
}

gen_opengl_list() {
	echo "" >> package.env
	echo "# 3D {games, apps, ...}" >> package.env
	echo "# Autogenerated list" >> package.env
	for x in $(grep --exclude-dir=.git --exclude-dir=distfiles -l -E -i -r -e "opengl" "${PORTAGE_DIR}/"* \
		| grep "ebuild" \
		| cut -f 4-5 -d "/" \
		| sort \
		| uniq)
	do
		echo "${x} ${OPENGL_OPT}" >> package.env
	done
	echo "" >> package.env
}

gen_simd_list() {
	echo "" >> package.env
	echo "# SIMD (sse, mmx, avx, neon, etc)" >> package.env
	echo "# Autogenerated list" >> package.env
	for x in $(grep --exclude-dir=.git --exclude-dir=distfiles -l -E -i -r -e "cpu_flags" "${PORTAGE_DIR}/"* \
		| grep "ebuild" \
		| cut -f 4-5 -d "/" \
		| sort \
		| uniq)
	do
		echo "${x} ${SIMD_OPT}" >> package.env
	done
	echo "" >> package.env

}

gen_asm_list() {
	echo "" >> package.env
	echo "# ASM code but may contain the human readable version" >> package.env
	echo "# Autogenerated list" >> package.env
	echo "" >> package.env
	for x in $(grep --exclude-dir=.git --exclude-dir=distfiles -l -E -i -r -e "(yasm|nasm|( |\")asm)" "${PORTAGE_DIR}/"* \
		| grep "ebuild" \
		| cut -f 4-5 -d "/" \
		| sort \
		| uniq)
	do
		echo "${x} O3.conf" >> package.env
	done
	echo "" >> package.env
}

gen_math_list() {
	echo "" >> package.env
	echo "# Math" >> package.env
	echo "# Autogenerated list" >> package.env
	for x in $(grep --exclude-dir=.git --exclude-dir=distfiles -l -E -i -r -e "linear.*solver" "${PORTAGE_DIR}/"* \
		| grep "ebuild" \
		| cut -f 4-5 -d "/" \
		| sort \
		| uniq) ;
	do
		echo "${x} ${MATH_OPT}" >> package.env
	done
	echo "" >> package.env
}

gen_linear_math_list() {
	echo "" >> package.env
	echo "# Linear math" >> package.env
	for x in $(grep --exclude-dir=.git --exclude-dir=distfiles -l -E -i -r -e "((sci-libs|virtual)/(lapack|openblas|mkl-rt|blis)|eigen)" "${PORTAGE_DIR}/"* \
		| grep "ebuild" \
		| cut -f 4-5 -d "/" \
		| sort \
		| uniq)
	do
		echo "${x} ${LINEAR_MATH_OPT}" >> package.env
	done
	echo "" >> package.env
}

autofetch_tarballs() {
	if [[ "${AUTOFETCH_TARBALLS}" == "1" ]] ; then
		echo "Autofetching tarballs"
		emerge -fve world
	fi
}

header() {
	echo "ASM_OPT=${ASM_OPT}"
	echo "AUTOFETCH_TARBALLS=${AUTOFETCH_TARBALLS}"
	echo "CRYPTO_CHEAP_OPT_CFG=${CRYPTO_CHEAP_OPT_CFG}"
	echo "CRYPTO_EXPENSIVE_OPT_CFG=${CRYPTO_EXPENSIVE_OPT_CFG}"
	echo "CRYPTO_ASYM_OPT_CFG=${CRYPTO_ASYM_OPT_CFG}"
	echo "DISTDIR=${DISTDIR}"
	echo "LINEAR_MATH_OPT=${LINEAR_MATH_OPT}"
	echo "OPENGL_OPT=${OPENGL_OPT}"
	echo "PORTAGE_DIR=${PORTAGE_DIR}"
	echo "MATH_OPT=${MATH_OPT}"
	echo "SIMD_OPT=${SIMD_OPT}"
	echo "SSA_SANITIZE_SIZE=${SSA_SANITIZE_SIZE}"
	echo "SSA_SANITIZE_OPT=${SSA_SANITIZE_OPT}"

	[[ ! -d "${DISTDIR}" ]] && ewarn "Missing ${DISTDIR}.  Change DISTDIR in ${SCRIPT_NAME}"

	if [[ "${SKIP_INTRO_PAUSE}" != "1" ]] ; then
		echo
		echo "Edit changes inside ${SCRIPT_NAME} now by pressing CTRL+C"
		echo "Continuing in 15 secs."
		echo
		sleep 15
	fi
}

gen_package_env() {
	echo
	echo "Generating package.env"
	echo

	[[ -e "package.env" ]] && mv package.env package-$(date +"%s").env.bak
	touch package.env

	cat package_env-header.txt >> package.env

	# v3 search layman repos also
	if [[ "${AUTOSANITIZE_SEARCH_MODE}" == "v2" ]] ; then
		# Search all portage
		gen_ssa_autosanitize_list_v2
	elif [[ "${AUTOSANITIZE_SEARCH_MODE}" == "v1" ]] ; then
		# Search only downloaded
		gen_ssa_autosanitize_list_v1
	fi
	gen_math_list
	gen_linear_math_list
	gen_opengl_list
	gen_asm_list
	gen_simd_list
#	gen_crypto_list

	cat fixes.lst >> package.env
	cat static-opts.lst >> package.env
	cat build-control.lst >> package.env
	cat cfi.lst >> package.env
	cat makeopts.lst >> package.env
	cat testing.lst >> package.env
}

footer() {
	echo "All work completed!"

	echo
	echo "NOTE:"
	echo "The crypto list needs to be manually edited."
	echo
}

main()
{
	if [[ "${DEVELOPER_MODE}" != "1" ]] ; then
		echo "${SCRIPT_NAME} is under construction"
		echo "Do not use yet!"
		return
	fi
	header
	autofetch_tarballs
	gen_package_env
	footer
}

main
