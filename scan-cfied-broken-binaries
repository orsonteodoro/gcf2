#!/bin/bash

# Environment variables to control this script:
FULL_SCAN=${FULL_SCAN:=1} # Scan beyond /*bin or /usr/*bin
ALLOW_OPT=${ALLOW_OPT:=0} # Allow the /opt folder?
# Show CFI violations, CFI init problems, and missing symbols \
SHOW_ERRORS=${SHOW_ERRORS:=1}
LOGGING_PATH=${LOGGING_PATH:=/var/log/cfi-scan.log}
LOGGING_INSPECT_PATH=${LOGGING_INSPECT_PATH:=/var/log/cfi-scan-inspected.log}
# Generate condensed report with ebuild package lookups on shared-libs and \
# executables. \
ANALYSIS="${ANALYSIS:=1}"
GEN_LOG="${GEN_LOG:=1}" # Generate output log before analysis
CHECK_VERSION="${CHECK_VERSION:=1}" # For --version
CHECK_NO_ARGS="${CHECK_NO_ARGS:=1}" # For normal startup
CHECK_HELP="${CHECK_HELP:=1}" # For --help
KILL_TIMEOUT=${KILL_TIMEOUT:=1} # Max time allowed to run each program.
# Show "Inspected ${exe_path}".  This could be useful to find the cause of \
# restarts, paging output, or stalls. \
SHOW_INSPECTED=${SHOW_INSPECTED:=0}
# This for extra security, but it is not guaranteed.\
ALLOW_ONLY_EMERGED="${ALLOW_ONLY_EMERGED:=0}"
# This for extra security, but it is not guaranteed.\
ALLOW_MODDED_BINARIES="${ALLOW_MODDED_BINARIES:=1}"

decho() {
	echo "${@}" >> "${LOGGING_PATH}"
	echo "${@}"
}

dcat() {
	cat "${1}" >> "${LOGGING_PATH}"
	cat "${1}"
}

banner() {
	echo
	echo "Scanning system for CFI violations and breakage.  Please wait..."
	echo
	echo "* This may crash X and lose unsaved work."
	echo "* This may reboot the computer and with it lost unsaved work."
	echo "* This may inadvertantly reset and regenerate incomplete settings."
	echo "* This may inadvertantly change the clock settings."
	echo "* This may stop network software or daemons."
	echo "* It is not recommended to run this script with an unclean (or"
	echo "     possibly compromised) computer."
	echo
	echo "Press Ctrl+C now to quit or wait 30 secs to proceed."
	echo
	sleep 30
}

gen_log() {
	local arg="${1}"
	echo
	echo "When scanning is done you may see the results by running \`<path> ${arg}\`"
	echo
	local exclude=(
		# basename goes here
		startx
	)
	if (( ${CHECK_NO_ARGS} == 1 )) && [[ "${arg}" == "" ]] ; then
		# Add pager apps that might:
		#  * Break output in addition apps
		#  * Shutdown or restart the computer
		#  * Stall progress
		# These have to be manually inspected.
		exclude+=(
			emacs # output problem
			halt
			locale-gen # don't generate incomplete locales
			pipewire-media-session # possible x crash
			poweroff
			reboot
			screen # output problem
			shutdown
			vipw # stall
			vigr # stall
		)

		# output problem
		for e in $(realpath /usr/bin/emacs*) ; do
			exclude+=( $(basename "${e}") )
		done
	fi
	echo
	echo "Exclusions:"
	echo "${exclude[@]}" | tr " " "\n"
	echo
	local error_list_=(
		"control flow integrity"
		"failed to allocate noreserve"
		"__cfi_"
		"__dso_handle"
		"CFI: CHECK failed:"
		"__ubsan_handle"
	)
	local error_list=$(for l in "${error_list_[@]}" ; do \
			echo "${l}" ; \
		done | tr "\n" "|" | sed -e "s/|$//g")
	# Add more search paths below if necessary.
	local full_scan_paths=( /bin /sbin /usr/bin /usr/sbin )
	local full_scan_paths_extra=(
		# Add your custom paths here
		$(realpath /usr/*/gcc-bin)
		$(realpath /usr/lib*)
	)
	(( ${ALLOW_OPT} )) && full_scan_paths_extra+=( /opt )
	if (( ${FULL_SCAN} == 1 )) ; then
		full_scan_paths=( ${full_scan_paths[@]} ${full_scan_paths_extra[@]} )
		echo "Full scan enabled:  ${full_scan_paths[@]}"
	else
		echo "Full scan disabled:  ${full_scan_paths[@]}"
	fi
	echo "Set FULL_SCAN=1 to scan all paths."
	echo "Finding executables, please wait..."
	decho "----" >> "${LOGGING_PATH}"
	decho "" >> "${LOGGING_PATH}"
	for f in $(find ${full_scan_paths[@]} -executable) ; do
		[[ -d "${f}" ]] && continue
		local is_exe=1
		file "${f}" | grep -q -e "ELF.*shared object" && is_exe=0
		#file "${f}" | grep -q -e "symbolic link" && is_exe=0
		(( ${is_exe} == 0 )) && continue
		local skip=0
		local bn=$(basename "${f}")
		for n in ${exclude[@]} ; do
			[[ "${bn}" == "${n}" ]] && skip=1
		done

		if (( ${ALLOW_ONLY_EMERGED} == 1 )) \
			&& ! grep -q -e " ${f} " /var/db/pkg/*/*/CONTENTS ; then
			decho "${f} is of unknown origin"
			skip=1
		else
			if (( ${ALLOW_MODDED_BINARIES} == 1 )) ; then
				:;
			else
				local line
				local md5_current
				if [[ -L "${f}" ]] ; then
					line=$(grep -e " $(realpath ${f}) " /var/db/pkg/*/*/CONTENTS)
					md5_current=$(md5sum $(realpath "${f}") | cut -f 1 -d " ")
				else
					line=$(grep -e " ${f} " /var/db/pkg/*/*/CONTENTS)
					md5_current=$(md5sum "${f}" | cut -f 1 -d " ")
				fi
				local md5_expected=$(echo "${line}" | cut -f 3 -d " ")
				if [[ "${md5_expected}" != "${md5_current}" ]] ; then
					decho "${f} has unmatched md5 hashes.  expected_md5=${md5_expected} current_md5=${md5_current}"
					skip=1
				fi
			fi
		fi

		if (( ${skip} == 1 )) ; then
			echo "Skipping ${f}"
			continue
		fi
		local error_found=0
		if (( ${SHOW_INSPECTED} == 1 )) ; then
			echo "Inspecting ${f}"
			echo "Inspecting ${f}" >> "${LOGGING_INSPECT_PATH}"
		fi
		if timeout -s SIGKILL ${KILL_TIMEOUT} ${f} ${arg} 2>&1 \
			| grep -q -E -e "(${error_list})" ; then
			error_found=1
			local pkg_name=$(grep -l "${f}" /var/db/pkg/*/*/CONTENTS \
				| sed -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g" | tr "\n" " ")
			decho "Detected in ${f} (pkg_name = ${pkg_name}):"
		fi
		if (( ${SHOW_ERRORS} == 1 && ${error_found} == 1 )) ; then
			timeout -s SIGKILL ${KILL_TIMEOUT} \
				bash -c "(\"${f}\" ${arg} 1>/dev/null 2> \"${SANDBOX_DIR}/output.log\")"
			dcat "${SANDBOX_DIR}/output.log"
			decho ""
			decho "----"
			decho ""
			# Make it easier to extract for condensed analysis
			if grep -q -e "CFI: CHECK failed" "${SANDBOX_DIR}/output.log" ; then
				decho "CFI: CHECK failed: (${pkg_name})"
			fi
			if grep -q -e "failed to allocate noreserve" "${SANDBOX_DIR}/output.log" ; then
				echo "failed to allocate noreserve (${pkg_name})" >> "${LOGGING_PATH}"
				for g in $(grep -E -e "/usr/.*" "${SANDBOX_DIR}/output.log") ; do
					[[ "${g}" =~ ^0x ]] && continue
					decho "noreserve: ${g} : "$(grep -l "${g}" /var/db/pkg/*/*/CONTENTS \
						| sed -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g")
				done
				for g in $(grep -E -e ".*/lib.*" "${SANDBOX_DIR}/output.log") ; do
					[[ "${g}" =~ ^0x ]] && continue
					decho "noreserve: ${g} : "$(grep -l "${g}" /var/db/pkg/*/*/CONTENTS \
						| sed -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g")
				done
			fi
			if grep -q -i -e "Illegal instruction" "${SANDBOX_DIR}/output.log" ; then
				decho "Illegal instruction detected (pkgname = ${pkg_name}  bin = ${f})"
			fi
		fi

		# Fix broken CRLF from `less`
		stty sane
	done
}

find_slowpath_errors() {
	echo
	echo "__cfi_slowpath_diag errors from:"
	echo
	for f in $(grep -e "__cfi_slowpath_diag" "${LOGGING_PATH}" \
		| grep -o -E " /.*.so[.0-9]+" \
		| sort \
		| uniq) ; do
		echo "${f}: "$(grep -l "${f}" /var/db/pkg/*/*/CONTENTS \
			| sed -r -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g")
	done
	echo
}

find_check_fail_abort_errors() {
	echo
	echo "__ubsan_handle_cfi_check_fail_abort errors from:"
	echo
	for f in $(grep -e "__ubsan_handle_cfi_check_fail_abort" "${LOGGING_PATH}" \
		| grep -o -E " /.*.so[.0-9]+" \
		| sort \
		| uniq) ; do
		echo "${f}: "$(grep -l "${f}" /var/db/pkg/*/*/CONTENTS \
			| sed -r -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g")
	done
	echo
}

find_indirect_function_call_errors() {
	echo
	echo "indirect function call errors from (src):"
	echo
	grep -r -e "indirect function call" "${LOGGING_PATH}" \
		| cut -f 1 -d ":" \
		| sort \
		| uniq
	echo
	echo "indirect function call errors from (lib):"
	echo
	for f in $(cat "${LOGGING_PATH}" \
		| pcregrep -M "indirect function call\n[(]" \
		| sed -e ':a;N;$!ba;s/\n[(]/ (/g' \
		| grep -o -e "(/.*.so.*):" \
		| sed -r -e "s|\):||g" -e "s|\(||g" -e "s|\+0x[0-9a-z]+$||g" \
		| sort \
		| uniq) ; do
		echo "${f}: "$(grep -l "${f}" /var/db/pkg/*/*/CONTENTS \
			| sed -r -e "s|/var/db/pkg/||g" -e "s|/CONTENTS||g")
	done
	echo
}

find_noreserve_libs_errors() {
	echo
	echo "noreserve errors (libs):"
	echo
	grep "noreserve:" "${LOGGING_PATH}" | sort | uniq
}

find_cfi_check_failed_errors() {
	echo
	echo "CFI: CHECK failed errors (libs):"
	echo
	grep "CFI: CHECK failed:" "${LOGGING_PATH}" | sort | uniq
}

find_segfaults() {
	echo
	echo "dmesg segfaults:"
	echo
	dmesg \
		| grep "segfault" \
		| cut -c 16- \
		| sed -r -e "s/\[[\+0-9a-z]+\]//g" \
			-e "s| [0-9a-f]+ | |g" \
			-e "s/(at|ip|sp)//g" \
			-e "s|[ ]+| |g" \
		| sort \
		| uniq
}

find_illegal_instruction() {
	echo
	echo "Illegal instruction from:"
	echo
	grep "Illegal instruction detected" "${LOGGING_PATH}" | sort | uniq
}

analysis() {
	find_slowpath_errors
	find_check_fail_abort_errors
	find_indirect_function_call_errors
	find_noreserve_libs_errors
	find_cfi_check_failed_errors
	find_segfaults
	find_illegal_instruction
	echo "Manual analysis still required because of parsing difficulty."
	echo "See ${LOGGING_PATH} for details."
}

cleanup() {
	echo "Removing sandbox"
	rm -rf "${sandboxdir}"
	exit 1
}

install_traps() {
	trap cleanup INT
	trap cleanup KILL
	trap cleanup ABRT
	trap cleanup QUIT
}

main() {
	export SANDBOX_DIR=$(mktemp -d)
	mkdir -p "${SANDBOX_DIR}"
	pushd "${SANDBOX_DIR}"
	install_traps
	banner
	if (( ${CHECK_HELP} == 1 \
		|| ${CHECK_VERSION} == 1 \
		|| ${CHECK_NO_ARGS} == 1 )) ; then
		echo "" > "${LOGGING_PATH}"
	fi
	if (( ${SHOW_INSPECTED} == 1 )) ; then
		echo "" > "${LOGGING_INSPECT_PATH}"
	fi
	local args=(
		"--help"
		"--version"
	)
	for a in ${args[@]} ; do
		(( ${CHECK_VERSION} != 1 )) && [[ "${a}" == "--version" ]] && continue
		(( ${CHECK_HELP} != 1 )) && [[ "${a}" == "--help" ]] && continue
		(( ${GEN_LOG} == 1 )) && gen_log "${a}"
	done
	(( "${CHECK_NO_ARGS}" )) && gen_log ""
	(( ${ANALYSIS} == 1)) && analysis
	popd
	cleanup
}

main
