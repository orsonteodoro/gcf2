# Performs auto unrolling but not full unrolling.

# benchmarks instantaneous duration in nanoseconds for 1000 iter O(n) loop
# Os full unrolled (with pragma), no simd, without -funroll-loops: 176, 101, 118, 90, 89, 149, 201 ; O(10^2 mode avg) time
# Os auto unrolled (no pragma), no simd, without -funroll-loops: 7400, 3688, 3811, 3769, 3886 ; O(10^3 mode avg) time
# Os auto unrolled (no pragma), no simd, with -funroll-loops: 4100, 4049, 2895, 7211, 7412, 4064 ; O(10^3 mode avg) time
# Os auto unrolled (no pragma), with simd, with -funroll-loops 6862, 3505, 7064, 4326 O(10^3 mode avg) tme
# O3 auto unrolled (no pragma), with simd, with -funroll-loops 7352 3579, 4165 O(10^3 mode avg) time
# O3 full unrolled (with pragma), with simd, with -funroll-loops 95, 135, 87, 92 O(10^1 mode avg) time
# O3 full unrolled (with pragma), with simd, without -funroll-loops 91, 91, 90, 121 O(10^1 mode avg) time

# Os unrolling disabled without pragma 3800, 7736, 3266 (10^3 mode avg) time
# Os unrolling disabled with pragma 192, 177, 89, 95, 97 (10^1-10^2 mode avg) time

# Observation: The number of auto unrolls do not match the loop constant limit and orders
# of magnitude smaller.

# When doing testing, the pragma has a limit of n < 65535.

# When testing O(n^2) loops, the time performance empirically is dependent on the body.

# To disable simd, the following was used and test.s was inspected without no xmm* references.
# -Os -mno-sse -mno-sse2 -mno-sse3 -mno-sse4a -fno-tree-vectorize -fno-tree-loop-vectorize

# Analysis: adding explicit `#pragma GCC unroll n` will improve time performance
# by ~10^2 for O(n) loops, but benefits are far below human recognition time.

# Turning on explicit unroll will override command line option of -fno-unroll-loops.

# The auto unroll compared with unrolled disabled have the same order of magnitude time.

# At N <= 5, a diminishing return seems likely between unrolled and not unrolled because
# same number of lines in assembly output.  Meaning adding the pragma with n=5
# will have similar nanoseconds on the same order of magnitude.

# At N >= 40, the gains becomes substantially apparent on the nanosecond scale.  At N ~ 30 it
# is a *maybe* on this machine because of outlier spikes.  The policy for this repo
# is maybe provide a unroll patch if N >= 40 with total instructions generated is less than
# less than page size to avoid possibly a hard drive read penalty in the milliseconds.
# Prefetch if possible should be used to avoid that penalty.

# The expected time to generate is approx t(i)=4.2284*1.0002^(i) r=0.9946, t is in seconds
# with another ebuild building in the background on this machine.  The max value for
# the arg to the unroll pragma could take 24 days to generate which is unreasonable.

# TODO:  patch code with explicit unrolling.
# Proper unrolling will not work without this pragma and should be only used
# if total code after unrolling less than page size, so less than 512 instructions.
# See https://gcc.gnu.org/onlinedocs/gcc/Loop-Specific-Pragmas.html

CFLAGS="${CFLAGS} -funroll-loops"
CXXFLAGS="${CXXFLAGS} -funroll-loops"

# Below is for gcc only

CFLAGS="${CFLAGS} -fopt-info-loop"
CXXFLAGS="${CXXFLAGS} -fopt-info-loop"
